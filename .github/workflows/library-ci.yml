name: CI

on:
  workflow_call:
    inputs:
      mvn-verify-opts:
        type: string
        required: false
        default: "['']"  
    secrets:
      ORGANIZATION_TOKEN:
        required: true
      CODACY_PROJECT_TOKEN:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codacy-analysis-cli:
    name: Codacy Analysis CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Set up Maven
        run: cp build.settings.xml ~/.m2/settings.xml

      - name: Maven Build
        run: mvn clean install -DskipTests=true -Ddockerfile.skip=true -B -V
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        with:
          tool: spotbugs
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true
          max-allowed-issues: 2147483647
          skip-uncommitted-files-check: true
          verbose: true
        continue-on-error: true

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        continue-on-error: true

  build:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Set up Maven
        run: cp build.settings.xml ~/.m2/settings.xml

      - name: Maven Build
        run: mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true -Ddockerfile.skip=true -B -V
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}

      - name: Maven Verify
        run: mvn verify -B
        if: github.event_name != 'release'

      - name: Configure git
        run: |
          echo "Git checkout branch ${GITHUB_REF##*/}, commit ${GITHUB_SHA} was pushed by ${GITHUB_ACTOR}"
          git checkout ${GITHUB_REF##*/}
          echo "Git reset hard to ${GITHUB_SHA}"
          git reset --hard ${GITHUB_SHA}
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
        if: github.ref_name == 'master'

      - name: Prepare release
        id: prepare_release
        run: |
          mvn -B build-helper:parse-version release:prepare \
            -DreleaseVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion} \
            -DdevelopmentVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT \
            -Darguments="-DskipTests=true"
          echo release_tag=$(git describe --tags --abbrev=0) >> $GITHUB_OUTPUT
        if: github.ref_name == 'master'

      - name: Perform release
        run: mvn -B release:perform -Darguments="-DskipTests=true -Ddocker.image.extra-tag=master -Dmaven.resolver.transport=wagon"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
        if: github.ref_name == 'master'

      - name: Rollback release
        if: failure() && github.ref_name == 'master'
        run: |
          mvn release:rollback || echo "nothing to rollback"
          if [ ! -z "${{ steps.prepare_release.outputs.release_tag }}" ]
          then
            git tag -d ${{ steps.prepare_release.outputs.release_tag }}
            git push origin :refs/tags/${{ steps.prepare_release.outputs.release_tag }}
          fi

      - name: Deploy release version
        run: |
          release_version=${{ github.event.release.tag_name }}
          echo Release version $release_version
          mvn versions:set -DnewVersion=$release_version -DgenerateBackupPoms=false
          mvn versions:commit
          mvn clean deploy -B -V
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
        if: github.event_name == 'release'

      - name: Rollback release (remove tag)
        if: failure() && github.event_name == 'release'
        run: git push origin :refs/tags/${{ github.event.release.tag_name }}
  
